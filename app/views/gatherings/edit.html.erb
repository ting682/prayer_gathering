<h1>Edit gathering</h1>
<% if flash[:gatheringerror] %>
<div class="errors">
<%= flash[:gatheringerror] %><br><br>
</div>
<% end %>

<%= render 'form' %>

<script
      src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_KEY'] %>&callback=initAutocomplete&libraries=places"
      defer
    ></script> 

<script>
let placeSearch;
let autocomplete;
const componentForm = {
    street_number: "short_name",
  route: "long_name",
  locality: "long_name",
  administrative_area_level_1: "short_name",
  country: "long_name",
  postal_code: "short_name"
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
    document.getElementById("autocomplete"),
    { types: ["geocode"] }
  );
  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(["address_component"]);
  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener("place_changed", fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  const place = autocomplete.getPlace();
    
//  for (const component in componentForm) {
//    document.getElementById(component).value = "";
//    document.getElementById(component).disabled = false;
//  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  

  
  for (const component of place.address_components) {
    const addressType = component.types[0];
    //debugger;

    if (addressType == "street_number") {
        document.getElementById('gathering_address_attributes_address_1').value = component[componentForm[addressType]]
    }

    if (addressType == "route") {
        document.getElementById('gathering_address_attributes_address_1').value = document.getElementById('gathering_address_attributes_address_1').value + " " + component[componentForm[addressType]]
    }

    if (addressType == "locality") {
        document.getElementById('gathering_address_attributes_city').value = component[componentForm[addressType]]
    }

    if (addressType == "administrative_area_level_1") {
        document.getElementById('gathering_address_attributes_state').value = component[componentForm[addressType]]
    }

    if (addressType == "postal_code") {
        document.getElementById('gathering_address_attributes_zipcode').value = component[componentForm[addressType]]
    }

  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      const geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      const circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}

</script>